/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatserver;
import java.awt.Color;
import java.util.ArrayList;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Amine
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form NewMain
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Online Chat Server & Data Transfer");
        setResizable(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 0));
        jLabel2.setText("List of Connected Clients");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User", "Host"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setBackground(new java.awt.Color(204, 204, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 153, 0));
        jButton1.setText("START SERVER");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Online Chat Server & Data Transfer");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(133, 133, 133)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jButton1))))
                        .addGap(0, 78, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try
        {
            ServerSocket s1 = new ServerSocket(6000);
            ServerSocket s2 = new ServerSocket(7000);
            Thread connectionListener = new Thread(new Runnable()
            {
                @Override
                public void run()
                {
                    while(true)
                    {
                        try
                        {
                            Socket socket1=s1.accept();
                            Socket socket2=s2.accept();
                            HashMap<String,Object> add=new HashMap<String,Object>();
                            add.put("socket1", socket1);
                            add.put("socket2", socket2);
                            add.put("will_receive_files",true);
                            sockets.add(add);
                            int index=sockets.indexOf(add);
                            String ip=socket1.getInetAddress().getHostName();
                            DefaultTableModel model=(DefaultTableModel) jTable1.getModel();
                            Thread messageListener = new Thread(new Runnable()
                            {
                               @Override
                               public void run()
                               {
                                   try
                                   {
                                       while(true)
                                       {
                                           ObjectInputStream ois = new ObjectInputStream(socket1.getInputStream());
                                           HashMap<String,Object> data=(HashMap<String, Object>)ois.readObject();
                                           if(data.containsKey("user_name"))
                                           {
                                               String user=(String)data.get("user_name");
                                               add.put("user_name",user);
                                               sockets.set(index, add);
                                               model.addRow(new Object[] {user,ip});
                                           }
                                           else if(data.containsKey("will_receive_files"))
                                           {
                                                HashMap<String,Object> change=new HashMap<String, Object>();
                                                change.put("socket1", socket1);
                                                change.put("socket2", socket2);
                                                change.put("will_receive_files",(Boolean)data.get("will_receive_files"));
                                                sockets.set(index, change);
                                           }
                                           else if(data.containsKey("data_type") && data.get("data_type").equals("message"))
                                           {
                                               Thread broadcastmessages=new Thread(new Runnable()
                                               {
                                                   @Override
                                                   public void run()
                                                   {
                                                       try
                                                       {
                                                           for(HashMap<String,Object> client:sockets)
                                                           {
                                                               Socket so=(Socket)client.get("socket1");
                                                               ObjectOutputStream oos = new ObjectOutputStream(so.getOutputStream());
                                                               oos.writeObject(data);
                                                           }  
                                                        }
                                                        catch(Exception e)
                                                        {
                                                        }
                                                   }                                                   
                                               });
                                               broadcastmessages.start();
                                           }
                                       }
                                   }
                                   catch(Exception e)
                                   {
                                       sockets.remove(add);
                                       model.removeRow(index);
                                   }
                               }
                            });
                            Thread fileListener = new Thread(new Runnable()
                            {
                               @Override
                               public void run()
                               {
                                   try
                                   {
                                       while(true)
                                       {
                                           ObjectInputStream ois = new ObjectInputStream(socket2.getInputStream());
                                           ArrayList<HashMap<String,Object>> data=(ArrayList<HashMap<String, Object>>)ois.readObject();
                                           Thread broadcastfiles=new Thread(new Runnable()
                                           {
                                               @Override
                                               public void run()
                                               {
                                                   try
                                                   {
                                                       for(HashMap<String,Object> client:sockets)
                                                       {
                                                           Socket so=(Socket)client.get("socket2");
                                                           Boolean will_receive_files=(Boolean)client.get("will_receive_files");
                                                           if(will_receive_files)
                                                           {
                                                               ObjectOutputStream oos = new ObjectOutputStream(so.getOutputStream());
                                                               oos.writeObject(data);
                                                           }
                                                       }  
                                                   }
                                                   catch(Exception e)
                                                   {
                                                   }
                                               }
                                           });
                                           broadcastfiles.start(); 
                                       }
                                   }
                                   catch(Exception e)
                                   {
                                       sockets.remove(add);
                                       model.removeRow(index);
                                   }
                               }
                            });
                            
                            messageListener.start();
                            fileListener.start();
                       }
                       catch(Exception e)
                       {
                       }
                    }
                }
            });   
            connectionListener.start();
        }
        catch(Exception e)
        {
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run()
            {
                try
                {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    Main main=new Main();
                    main.setLocationRelativeTo(null);
                    main.getContentPane().setBackground(Color.black);
                    main.setVisible(true);
                }
                catch(Exception e)
                {
                    
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    private static ArrayList<HashMap<String,Object>> sockets=new ArrayList<HashMap<String,Object>>();
}
